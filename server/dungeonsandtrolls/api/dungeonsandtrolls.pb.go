// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: proto/dungeonsandtrolls.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DamageType int32

const (
	DamageType_none     DamageType = 0
	DamageType_slash    DamageType = 1
	DamageType_piercing DamageType = 2
	DamageType_fire     DamageType = 3
	DamageType_poison   DamageType = 4
	DamageType_electric DamageType = 5
)

// Enum value maps for DamageType.
var (
	DamageType_name = map[int32]string{
		0: "none",
		1: "slash",
		2: "piercing",
		3: "fire",
		4: "poison",
		5: "electric",
	}
	DamageType_value = map[string]int32{
		"none":     0,
		"slash":    1,
		"piercing": 2,
		"fire":     3,
		"poison":   4,
		"electric": 5,
	}
)

func (x DamageType) Enum() *DamageType {
	p := new(DamageType)
	*p = x
	return p
}

func (x DamageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DamageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dungeonsandtrolls_proto_enumTypes[0].Descriptor()
}

func (DamageType) Type() protoreflect.EnumType {
	return &file_proto_dungeonsandtrolls_proto_enumTypes[0]
}

func (x DamageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DamageType.Descriptor instead.
func (DamageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{0}
}

type Skill_Target int32

const (
	Skill_none      Skill_Target = 0
	Skill_position  Skill_Target = 1
	Skill_character Skill_Target = 2
	Skill_item      Skill_Target = 3
)

// Enum value maps for Skill_Target.
var (
	Skill_Target_name = map[int32]string{
		0: "none",
		1: "position",
		2: "character",
		3: "item",
	}
	Skill_Target_value = map[string]int32{
		"none":      0,
		"position":  1,
		"character": 2,
		"item":      3,
	}
)

func (x Skill_Target) Enum() *Skill_Target {
	p := new(Skill_Target)
	*p = x
	return p
}

func (x Skill_Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Skill_Target) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dungeonsandtrolls_proto_enumTypes[1].Descriptor()
}

func (Skill_Target) Type() protoreflect.EnumType {
	return &file_proto_dungeonsandtrolls_proto_enumTypes[1]
}

func (x Skill_Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Skill_Target.Descriptor instead.
func (Skill_Target) EnumDescriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{16, 0}
}

type Item_Type int32

const (
	Item_none     Item_Type = 0
	Item_head     Item_Type = 1
	Item_mainHand Item_Type = 2
	Item_offHand  Item_Type = 3
	Item_body     Item_Type = 4
	Item_legs     Item_Type = 5
	Item_neck     Item_Type = 6
)

// Enum value maps for Item_Type.
var (
	Item_Type_name = map[int32]string{
		0: "none",
		1: "head",
		2: "mainHand",
		3: "offHand",
		4: "body",
		5: "legs",
		6: "neck",
	}
	Item_Type_value = map[string]int32{
		"none":     0,
		"head":     1,
		"mainHand": 2,
		"offHand":  3,
		"body":     4,
		"legs":     5,
		"neck":     6,
	}
)

func (x Item_Type) Enum() *Item_Type {
	p := new(Item_Type)
	*p = x
	return p
}

func (x Item_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Item_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dungeonsandtrolls_proto_enumTypes[2].Descriptor()
}

func (Item_Type) Type() protoreflect.EnumType {
	return &file_proto_dungeonsandtrolls_proto_enumTypes[2]
}

func (x Item_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Item_Type.Descriptor instead.
func (Item_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{17, 0}
}

type Event_Type int32

const (
	Event_DAMAGE  Event_Type = 0
	Event_MESSAGE Event_Type = 1
	Event_BUY     Event_Type = 2
	Event_EQUIP   Event_Type = 3
	Event_ERROR   Event_Type = 4
)

// Enum value maps for Event_Type.
var (
	Event_Type_name = map[int32]string{
		0: "DAMAGE",
		1: "MESSAGE",
		2: "BUY",
		3: "EQUIP",
		4: "ERROR",
	}
	Event_Type_value = map[string]int32{
		"DAMAGE":  0,
		"MESSAGE": 1,
		"BUY":     2,
		"EQUIP":   3,
		"ERROR":   4,
	}
)

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}

func (x Event_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dungeonsandtrolls_proto_enumTypes[3].Descriptor()
}

func (Event_Type) Type() protoreflect.EnumType {
	return &file_proto_dungeonsandtrolls_proto_enumTypes[3]
}

func (x Event_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Type.Descriptor instead.
func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{26, 0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Decoration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Decoration) Reset() {
	*x = Decoration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decoration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decoration) ProtoMessage() {}

func (x *Decoration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decoration.ProtoReflect.Descriptor instead.
func (*Decoration) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{1}
}

func (x *Decoration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Decoration) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{2}
}

func (x *Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doors []*Position `protobuf:"bytes,1,rep,name=doors,proto3" json:"doors,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{3}
}

func (x *Key) GetDoors() []*Position {
	if x != nil {
		return x.Doors
	}
	return nil
}

type Waypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFloor int32 `protobuf:"varint,1,opt,name=destinationFloor,proto3" json:"destinationFloor,omitempty"`
}

func (x *Waypoint) Reset() {
	*x = Waypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waypoint) ProtoMessage() {}

func (x *Waypoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waypoint.ProtoReflect.Descriptor instead.
func (*Waypoint) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{4}
}

func (x *Waypoint) GetDestinationFloor() int32 {
	if x != nil {
		return x.DestinationFloor
	}
	return 0
}

type GameStateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ascii    *bool `protobuf:"varint,1,opt,name=ascii,proto3,oneof" json:"ascii,omitempty"`
	Events   *bool `protobuf:"varint,2,opt,name=events,proto3,oneof" json:"events,omitempty"`
	Blocking *bool `protobuf:"varint,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}

func (x *GameStateParams) Reset() {
	*x = GameStateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStateParams) ProtoMessage() {}

func (x *GameStateParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStateParams.ProtoReflect.Descriptor instead.
func (*GameStateParams) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{5}
}

func (x *GameStateParams) GetAscii() bool {
	if x != nil && x.Ascii != nil {
		return *x.Ascii
	}
	return false
}

func (x *GameStateParams) GetEvents() bool {
	if x != nil && x.Events != nil {
		return *x.Events
	}
	return false
}

func (x *GameStateParams) GetBlocking() bool {
	if x != nil && x.Blocking != nil {
		return *x.Blocking
	}
	return false
}

type CommandsBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buy             *Identifiers `protobuf:"bytes,1,opt,name=buy,proto3,oneof" json:"buy,omitempty"`
	Equip           *Identifier  `protobuf:"bytes,2,opt,name=equip,proto3,oneof" json:"equip,omitempty"`
	Move            *Coordinates `protobuf:"bytes,3,opt,name=move,proto3,oneof" json:"move,omitempty"`
	Skill           *SkillUse    `protobuf:"bytes,4,opt,name=skill,proto3,oneof" json:"skill,omitempty"`
	AssignAttribute *Attributes  `protobuf:"bytes,5,opt,name=assign_attribute,json=assignAttribute,proto3,oneof" json:"assign_attribute,omitempty"`
	Yell            *Message     `protobuf:"bytes,6,opt,name=yell,proto3,oneof" json:"yell,omitempty"`
}

func (x *CommandsBatch) Reset() {
	*x = CommandsBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandsBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandsBatch) ProtoMessage() {}

func (x *CommandsBatch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandsBatch.ProtoReflect.Descriptor instead.
func (*CommandsBatch) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{6}
}

func (x *CommandsBatch) GetBuy() *Identifiers {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *CommandsBatch) GetEquip() *Identifier {
	if x != nil {
		return x.Equip
	}
	return nil
}

func (x *CommandsBatch) GetMove() *Coordinates {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *CommandsBatch) GetSkill() *SkillUse {
	if x != nil {
		return x.Skill
	}
	return nil
}

func (x *CommandsBatch) GetAssignAttribute() *Attributes {
	if x != nil {
		return x.AssignAttribute
	}
	return nil
}

func (x *CommandsBatch) GetYell() *Message {
	if x != nil {
		return x.Yell
	}
	return nil
}

type CommandsForMonsters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands map[string]*CommandsBatch `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CommandsForMonsters) Reset() {
	*x = CommandsForMonsters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandsForMonsters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandsForMonsters) ProtoMessage() {}

func (x *CommandsForMonsters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandsForMonsters.ProtoReflect.Descriptor instead.
func (*CommandsForMonsters) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{7}
}

func (x *CommandsForMonsters) GetCommands() map[string]*CommandsBatch {
	if x != nil {
		return x.Commands
	}
	return nil
}

type Elements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cold      int32 `protobuf:"varint,1,opt,name=cold,proto3" json:"cold,omitempty"`
	Fire      int32 `protobuf:"varint,2,opt,name=fire,proto3" json:"fire,omitempty"`
	Lightning int32 `protobuf:"varint,3,opt,name=lightning,proto3" json:"lightning,omitempty"`
	Poison    int32 `protobuf:"varint,4,opt,name=poison,proto3" json:"poison,omitempty"`
	Physical  int32 `protobuf:"varint,5,opt,name=physical,proto3" json:"physical,omitempty"`
}

func (x *Elements) Reset() {
	*x = Elements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Elements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elements) ProtoMessage() {}

func (x *Elements) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Elements.ProtoReflect.Descriptor instead.
func (*Elements) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{8}
}

func (x *Elements) GetCold() int32 {
	if x != nil {
		return x.Cold
	}
	return 0
}

func (x *Elements) GetFire() int32 {
	if x != nil {
		return x.Fire
	}
	return 0
}

func (x *Elements) GetLightning() int32 {
	if x != nil {
		return x.Lightning
	}
	return 0
}

func (x *Elements) GetPoison() int32 {
	if x != nil {
		return x.Poison
	}
	return 0
}

func (x *Elements) GetPhysical() int32 {
	if x != nil {
		return x.Physical
	}
	return 0
}

type Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinDamage    *Elements   `protobuf:"bytes,1,opt,name=min_damage,json=minDamage,proto3" json:"min_damage,omitempty"`
	MaxDamage    *Elements   `protobuf:"bytes,2,opt,name=max_damage,json=maxDamage,proto3" json:"max_damage,omitempty"`
	Duration     int32       `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	AreaOfEffect *int32      `protobuf:"varint,4,opt,name=area_of_effect,json=areaOfEffect,proto3,oneof" json:"area_of_effect,omitempty"`
	Boosts       *Attributes `protobuf:"bytes,5,opt,name=boosts,proto3,oneof" json:"boosts,omitempty"`
	MinStats     *Stats      `protobuf:"bytes,6,opt,name=min_stats,json=minStats,proto3" json:"min_stats,omitempty"`
	MaxStats     *Stats      `protobuf:"bytes,7,opt,name=max_stats,json=maxStats,proto3" json:"max_stats,omitempty"`
}

func (x *Effect) Reset() {
	*x = Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Effect) ProtoMessage() {}

func (x *Effect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Effect.ProtoReflect.Descriptor instead.
func (*Effect) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{9}
}

func (x *Effect) GetMinDamage() *Elements {
	if x != nil {
		return x.MinDamage
	}
	return nil
}

func (x *Effect) GetMaxDamage() *Elements {
	if x != nil {
		return x.MaxDamage
	}
	return nil
}

func (x *Effect) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Effect) GetAreaOfEffect() int32 {
	if x != nil && x.AreaOfEffect != nil {
		return *x.AreaOfEffect
	}
	return 0
}

func (x *Effect) GetBoosts() *Attributes {
	if x != nil {
		return x.Boosts
	}
	return nil
}

func (x *Effect) GetMinStats() *Stats {
	if x != nil {
		return x.MinStats
	}
	return nil
}

func (x *Effect) GetMaxStats() *Stats {
	if x != nil {
		return x.MaxStats
	}
	return nil
}

type Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strength       *float32 `protobuf:"fixed32,1,opt,name=strength,proto3,oneof" json:"strength,omitempty"`
	Dexterity      *float32 `protobuf:"fixed32,2,opt,name=dexterity,proto3,oneof" json:"dexterity,omitempty"`
	Inteligence    *float32 `protobuf:"fixed32,3,opt,name=inteligence,proto3,oneof" json:"inteligence,omitempty"`
	Willpower      *float32 `protobuf:"fixed32,4,opt,name=willpower,proto3,oneof" json:"willpower,omitempty"`
	Constitution   *float32 `protobuf:"fixed32,5,opt,name=constitution,proto3,oneof" json:"constitution,omitempty"`
	SlashArmor     *float32 `protobuf:"fixed32,6,opt,name=slash_armor,json=slashArmor,proto3,oneof" json:"slash_armor,omitempty"`
	PiercingResist *float32 `protobuf:"fixed32,7,opt,name=piercing_resist,json=piercingResist,proto3,oneof" json:"piercing_resist,omitempty"`
	FireResist     *float32 `protobuf:"fixed32,8,opt,name=fire_resist,json=fireResist,proto3,oneof" json:"fire_resist,omitempty"`
	PoisonResist   *float32 `protobuf:"fixed32,9,opt,name=poison_resist,json=poisonResist,proto3,oneof" json:"poison_resist,omitempty"`
	ElectricResist *float32 `protobuf:"fixed32,10,opt,name=electric_resist,json=electricResist,proto3,oneof" json:"electric_resist,omitempty"`
	Life           *float32 `protobuf:"fixed32,11,opt,name=life,proto3,oneof" json:"life,omitempty"`
	Stamina        *float32 `protobuf:"fixed32,12,opt,name=stamina,proto3,oneof" json:"stamina,omitempty"`
	Mana           *float32 `protobuf:"fixed32,13,opt,name=mana,proto3,oneof" json:"mana,omitempty"`
	Scalar         *float32 `protobuf:"fixed32,14,opt,name=scalar,proto3,oneof" json:"scalar,omitempty"`
}

func (x *Attributes) Reset() {
	*x = Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attributes) ProtoMessage() {}

func (x *Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attributes.ProtoReflect.Descriptor instead.
func (*Attributes) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{10}
}

func (x *Attributes) GetStrength() float32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *Attributes) GetDexterity() float32 {
	if x != nil && x.Dexterity != nil {
		return *x.Dexterity
	}
	return 0
}

func (x *Attributes) GetInteligence() float32 {
	if x != nil && x.Inteligence != nil {
		return *x.Inteligence
	}
	return 0
}

func (x *Attributes) GetWillpower() float32 {
	if x != nil && x.Willpower != nil {
		return *x.Willpower
	}
	return 0
}

func (x *Attributes) GetConstitution() float32 {
	if x != nil && x.Constitution != nil {
		return *x.Constitution
	}
	return 0
}

func (x *Attributes) GetSlashArmor() float32 {
	if x != nil && x.SlashArmor != nil {
		return *x.SlashArmor
	}
	return 0
}

func (x *Attributes) GetPiercingResist() float32 {
	if x != nil && x.PiercingResist != nil {
		return *x.PiercingResist
	}
	return 0
}

func (x *Attributes) GetFireResist() float32 {
	if x != nil && x.FireResist != nil {
		return *x.FireResist
	}
	return 0
}

func (x *Attributes) GetPoisonResist() float32 {
	if x != nil && x.PoisonResist != nil {
		return *x.PoisonResist
	}
	return 0
}

func (x *Attributes) GetElectricResist() float32 {
	if x != nil && x.ElectricResist != nil {
		return *x.ElectricResist
	}
	return 0
}

func (x *Attributes) GetLife() float32 {
	if x != nil && x.Life != nil {
		return *x.Life
	}
	return 0
}

func (x *Attributes) GetStamina() float32 {
	if x != nil && x.Stamina != nil {
		return *x.Stamina
	}
	return 0
}

func (x *Attributes) GetMana() float32 {
	if x != nil && x.Mana != nil {
		return *x.Mana
	}
	return 0
}

func (x *Attributes) GetScalar() float32 {
	if x != nil && x.Scalar != nil {
		return *x.Scalar
	}
	return 0
}

type SkillAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strength       *Attributes `protobuf:"bytes,1,opt,name=strength,proto3,oneof" json:"strength,omitempty"`
	Dexterity      *Attributes `protobuf:"bytes,2,opt,name=dexterity,proto3,oneof" json:"dexterity,omitempty"`
	Inteligence    *Attributes `protobuf:"bytes,3,opt,name=inteligence,proto3,oneof" json:"inteligence,omitempty"`
	Willpower      *Attributes `protobuf:"bytes,4,opt,name=willpower,proto3,oneof" json:"willpower,omitempty"`
	Constitution   *Attributes `protobuf:"bytes,5,opt,name=constitution,proto3,oneof" json:"constitution,omitempty"`
	SlashArmor     *Attributes `protobuf:"bytes,6,opt,name=slash_armor,json=slashArmor,proto3,oneof" json:"slash_armor,omitempty"`
	PiercingResist *Attributes `protobuf:"bytes,7,opt,name=piercing_resist,json=piercingResist,proto3,oneof" json:"piercing_resist,omitempty"`
	FireResist     *Attributes `protobuf:"bytes,8,opt,name=fire_resist,json=fireResist,proto3,oneof" json:"fire_resist,omitempty"`
	PoisonResist   *Attributes `protobuf:"bytes,9,opt,name=poison_resist,json=poisonResist,proto3,oneof" json:"poison_resist,omitempty"`
	ElectricResist *Attributes `protobuf:"bytes,10,opt,name=electric_resist,json=electricResist,proto3,oneof" json:"electric_resist,omitempty"`
	Life           *Attributes `protobuf:"bytes,11,opt,name=life,proto3,oneof" json:"life,omitempty"`
	Stamina        *Attributes `protobuf:"bytes,12,opt,name=stamina,proto3,oneof" json:"stamina,omitempty"`
	Mana           *Attributes `protobuf:"bytes,13,opt,name=mana,proto3,oneof" json:"mana,omitempty"`
	Scalar         *Attributes `protobuf:"bytes,14,opt,name=scalar,proto3,oneof" json:"scalar,omitempty"`
}

func (x *SkillAttributes) Reset() {
	*x = SkillAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillAttributes) ProtoMessage() {}

func (x *SkillAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillAttributes.ProtoReflect.Descriptor instead.
func (*SkillAttributes) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{11}
}

func (x *SkillAttributes) GetStrength() *Attributes {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *SkillAttributes) GetDexterity() *Attributes {
	if x != nil {
		return x.Dexterity
	}
	return nil
}

func (x *SkillAttributes) GetInteligence() *Attributes {
	if x != nil {
		return x.Inteligence
	}
	return nil
}

func (x *SkillAttributes) GetWillpower() *Attributes {
	if x != nil {
		return x.Willpower
	}
	return nil
}

func (x *SkillAttributes) GetConstitution() *Attributes {
	if x != nil {
		return x.Constitution
	}
	return nil
}

func (x *SkillAttributes) GetSlashArmor() *Attributes {
	if x != nil {
		return x.SlashArmor
	}
	return nil
}

func (x *SkillAttributes) GetPiercingResist() *Attributes {
	if x != nil {
		return x.PiercingResist
	}
	return nil
}

func (x *SkillAttributes) GetFireResist() *Attributes {
	if x != nil {
		return x.FireResist
	}
	return nil
}

func (x *SkillAttributes) GetPoisonResist() *Attributes {
	if x != nil {
		return x.PoisonResist
	}
	return nil
}

func (x *SkillAttributes) GetElectricResist() *Attributes {
	if x != nil {
		return x.ElectricResist
	}
	return nil
}

func (x *SkillAttributes) GetLife() *Attributes {
	if x != nil {
		return x.Life
	}
	return nil
}

func (x *SkillAttributes) GetStamina() *Attributes {
	if x != nil {
		return x.Stamina
	}
	return nil
}

func (x *SkillAttributes) GetMana() *Attributes {
	if x != nil {
		return x.Mana
	}
	return nil
}

func (x *SkillAttributes) GetScalar() *Attributes {
	if x != nil {
		return x.Scalar
	}
	return nil
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Life    float32 `protobuf:"fixed32,1,opt,name=life,proto3" json:"life,omitempty"`
	Mana    float32 `protobuf:"fixed32,2,opt,name=mana,proto3" json:"mana,omitempty"`
	Stamina float32 `protobuf:"fixed32,3,opt,name=stamina,proto3" json:"stamina,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{12}
}

func (x *Stats) GetLife() float32 {
	if x != nil {
		return x.Life
	}
	return 0
}

func (x *Stats) GetMana() float32 {
	if x != nil {
		return x.Mana
	}
	return 0
}

func (x *Stats) GetStamina() float32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

type Rewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xp    *int32 `protobuf:"varint,1,opt,name=xp,proto3,oneof" json:"xp,omitempty"`
	Money *int32 `protobuf:"varint,2,opt,name=money,proto3,oneof" json:"money,omitempty"`
}

func (x *Rewards) Reset() {
	*x = Rewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rewards) ProtoMessage() {}

func (x *Rewards) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rewards.ProtoReflect.Descriptor instead.
func (*Rewards) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{13}
}

func (x *Rewards) GetXp() int32 {
	if x != nil && x.Xp != nil {
		return *x.Xp
	}
	return 0
}

func (x *Rewards) GetMoney() int32 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

type Monster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Attributes    *Attributes `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Effects       []*Effect   `protobuf:"bytes,8,rep,name=effects,proto3" json:"effects,omitempty"`
	EquippedItems []*Item     `protobuf:"bytes,11,rep,name=equipped_items,json=equippedItems,proto3" json:"equipped_items,omitempty"`
	Score         int32       `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`
	Icon          string      `protobuf:"bytes,13,opt,name=icon,proto3" json:"icon,omitempty"`
	Algorithm     string      `protobuf:"bytes,14,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Faction       string      `protobuf:"bytes,15,opt,name=faction,proto3" json:"faction,omitempty"`
	OnDeath       []*Dropable `protobuf:"bytes,16,rep,name=on_death,json=onDeath,proto3" json:"on_death,omitempty"`
}

func (x *Monster) Reset() {
	*x = Monster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monster) ProtoMessage() {}

func (x *Monster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monster.ProtoReflect.Descriptor instead.
func (*Monster) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{14}
}

func (x *Monster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Monster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Monster) GetAttributes() *Attributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Monster) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Monster) GetEquippedItems() []*Item {
	if x != nil {
		return x.EquippedItems
	}
	return nil
}

func (x *Monster) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Monster) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Monster) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Monster) GetFaction() string {
	if x != nil {
		return x.Faction
	}
	return ""
}

func (x *Monster) GetOnDeath() []*Dropable {
	if x != nil {
		return x.OnDeath
	}
	return nil
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Stats           *Stats      `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	Level           int32       `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Attributes      *Attributes `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Resistances     *Elements   `protobuf:"bytes,6,opt,name=resistances,proto3" json:"resistances,omitempty"`
	Inventory       []*Item     `protobuf:"bytes,7,rep,name=inventory,proto3" json:"inventory,omitempty"`
	Xp              int32       `protobuf:"varint,8,opt,name=xp,proto3" json:"xp,omitempty"`
	Money           int32       `protobuf:"varint,9,opt,name=money,proto3" json:"money,omitempty"`
	FreeSkillPoints int32       `protobuf:"varint,10,opt,name=free_skill_points,json=freeSkillPoints,proto3" json:"free_skill_points,omitempty"`
	Equip           []*Item     `protobuf:"bytes,11,rep,name=equip,proto3" json:"equip,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{15}
}

func (x *Character) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Character) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Character) GetAttributes() *Attributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Character) GetResistances() *Elements {
	if x != nil {
		return x.Resistances
	}
	return nil
}

func (x *Character) GetInventory() []*Item {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *Character) GetXp() int32 {
	if x != nil {
		return x.Xp
	}
	return 0
}

func (x *Character) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *Character) GetFreeSkillPoints() int32 {
	if x != nil {
		return x.FreeSkillPoints
	}
	return 0
}

func (x *Character) GetEquip() []*Item {
	if x != nil {
		return x.Equip
	}
	return nil
}

type Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TargetType   Skill_Target `protobuf:"varint,3,opt,name=targetType,proto3,enum=dungeonsandtrolls.Skill_Target" json:"targetType,omitempty"`
	Effects      []*Effect    `protobuf:"bytes,4,rep,name=effects,proto3" json:"effects,omitempty"`
	Cost         *Attributes  `protobuf:"bytes,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Range        *Attributes  `protobuf:"bytes,6,opt,name=range,proto3" json:"range,omitempty"`
	Radius       *Attributes  `protobuf:"bytes,7,opt,name=radius,proto3" json:"radius,omitempty"`
	Duration     *Attributes  `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	DamageAmount *Attributes  `protobuf:"bytes,9,opt,name=damageAmount,proto3" json:"damageAmount,omitempty"`
	DamageType   DamageType   `protobuf:"varint,10,opt,name=damage_type,json=damageType,proto3,enum=dungeonsandtrolls.DamageType" json:"damage_type,omitempty"`
	Caster       *SkillEffect `protobuf:"bytes,11,opt,name=caster,proto3" json:"caster,omitempty"`
	Target       *SkillEffect `protobuf:"bytes,12,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Skill) Reset() {
	*x = Skill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill) ProtoMessage() {}

func (x *Skill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill.ProtoReflect.Descriptor instead.
func (*Skill) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{16}
}

func (x *Skill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Skill) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Skill) GetTargetType() Skill_Target {
	if x != nil {
		return x.TargetType
	}
	return Skill_none
}

func (x *Skill) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Skill) GetCost() *Attributes {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Skill) GetRange() *Attributes {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Skill) GetRadius() *Attributes {
	if x != nil {
		return x.Radius
	}
	return nil
}

func (x *Skill) GetDuration() *Attributes {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Skill) GetDamageAmount() *Attributes {
	if x != nil {
		return x.DamageAmount
	}
	return nil
}

func (x *Skill) GetDamageType() DamageType {
	if x != nil {
		return x.DamageType
	}
	return DamageType_none
}

func (x *Skill) GetCaster() *SkillEffect {
	if x != nil {
		return x.Caster
	}
	return nil
}

func (x *Skill) GetTarget() *SkillEffect {
	if x != nil {
		return x.Target
	}
	return nil
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Slot         Item_Type   `protobuf:"varint,3,opt,name=slot,proto3,enum=dungeonsandtrolls.Item_Type" json:"slot,omitempty"`
	BuyPrice     int32       `protobuf:"varint,4,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	Requirements *Attributes `protobuf:"bytes,5,opt,name=requirements,proto3" json:"requirements,omitempty"`
	Attributes   *Attributes `protobuf:"bytes,6,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Skills       []*Skill    `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{17}
}

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetSlot() Item_Type {
	if x != nil {
		return x.Slot
	}
	return Item_none
}

func (x *Item) GetBuyPrice() int32 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *Item) GetRequirements() *Attributes {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Item) GetAttributes() *Attributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Item) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

type Dropable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*Dropable_Skill
	//	*Dropable_Item
	//	*Dropable_Monster
	//	*Dropable_Decoration
	//	*Dropable_Waypoint
	//	*Dropable_Key
	Data isDropable_Data `protobuf_oneof:"data"`
}

func (x *Dropable) Reset() {
	*x = Dropable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dropable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dropable) ProtoMessage() {}

func (x *Dropable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dropable.ProtoReflect.Descriptor instead.
func (*Dropable) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{18}
}

func (m *Dropable) GetData() isDropable_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Dropable) GetSkill() *Skill {
	if x, ok := x.GetData().(*Dropable_Skill); ok {
		return x.Skill
	}
	return nil
}

func (x *Dropable) GetItem() *Item {
	if x, ok := x.GetData().(*Dropable_Item); ok {
		return x.Item
	}
	return nil
}

func (x *Dropable) GetMonster() *Monster {
	if x, ok := x.GetData().(*Dropable_Monster); ok {
		return x.Monster
	}
	return nil
}

func (x *Dropable) GetDecoration() *Decoration {
	if x, ok := x.GetData().(*Dropable_Decoration); ok {
		return x.Decoration
	}
	return nil
}

func (x *Dropable) GetWaypoint() *Waypoint {
	if x, ok := x.GetData().(*Dropable_Waypoint); ok {
		return x.Waypoint
	}
	return nil
}

func (x *Dropable) GetKey() *Key {
	if x, ok := x.GetData().(*Dropable_Key); ok {
		return x.Key
	}
	return nil
}

type isDropable_Data interface {
	isDropable_Data()
}

type Dropable_Skill struct {
	Skill *Skill `protobuf:"bytes,1,opt,name=skill,proto3,oneof"`
}

type Dropable_Item struct {
	Item *Item `protobuf:"bytes,2,opt,name=item,proto3,oneof"`
}

type Dropable_Monster struct {
	Monster *Monster `protobuf:"bytes,3,opt,name=monster,proto3,oneof"`
}

type Dropable_Decoration struct {
	Decoration *Decoration `protobuf:"bytes,4,opt,name=decoration,proto3,oneof"`
}

type Dropable_Waypoint struct {
	Waypoint *Waypoint `protobuf:"bytes,5,opt,name=waypoint,proto3,oneof"`
}

type Dropable_Key struct {
	Key *Key `protobuf:"bytes,6,opt,name=key,proto3,oneof"`
}

func (*Dropable_Skill) isDropable_Data() {}

func (*Dropable_Item) isDropable_Data() {}

func (*Dropable_Monster) isDropable_Data() {}

func (*Dropable_Decoration) isDropable_Data() {}

func (*Dropable_Waypoint) isDropable_Data() {}

func (*Dropable_Key) isDropable_Data() {}

type SkillEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes *SkillAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Flags      []string         `protobuf:"bytes,2,rep,name=flags,proto3" json:"flags,omitempty"`
	Summons    []*Dropable      `protobuf:"bytes,3,rep,name=summons,proto3" json:"summons,omitempty"`
}

func (x *SkillEffect) Reset() {
	*x = SkillEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillEffect) ProtoMessage() {}

func (x *SkillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillEffect.ProtoReflect.Descriptor instead.
func (*SkillEffect) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{19}
}

func (x *SkillEffect) GetAttributes() *SkillAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SkillEffect) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SkillEffect) GetSummons() []*Dropable {
	if x != nil {
		return x.Summons
	}
	return nil
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PositionX int32  `protobuf:"varint,2,opt,name=position_x,json=positionX,proto3" json:"position_x,omitempty"`
	PositionY int32  `protobuf:"varint,3,opt,name=position_y,json=positionY,proto3" json:"position_y,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{20}
}

func (x *Object) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Object) GetPositionX() int32 {
	if x != nil {
		return x.PositionX
	}
	return 0
}

func (x *Object) GetPositionY() int32 {
	if x != nil {
		return x.PositionY
	}
	return 0
}

type Shortcut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeadsTo *Coordinates `protobuf:"bytes,1,opt,name=leads_to,json=leadsTo,proto3,oneof" json:"leads_to,omitempty"`
}

func (x *Shortcut) Reset() {
	*x = Shortcut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shortcut) ProtoMessage() {}

func (x *Shortcut) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shortcut.ProtoReflect.Descriptor instead.
func (*Shortcut) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{21}
}

func (x *Shortcut) GetLeadsTo() *Coordinates {
	if x != nil {
		return x.LeadsTo
	}
	return nil
}

type MapObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    *Coordinates  `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Monsters    []*Monster    `protobuf:"bytes,2,rep,name=monsters,proto3" json:"monsters,omitempty"`
	Players     []*Character  `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	IsStairs    bool          `protobuf:"varint,4,opt,name=is_stairs,json=isStairs,proto3" json:"is_stairs,omitempty"`
	Portals     []*Shortcut   `protobuf:"bytes,5,rep,name=portals,proto3" json:"portals,omitempty"`
	Decorations []*Decoration `protobuf:"bytes,6,rep,name=decorations,proto3" json:"decorations,omitempty"`
	Effects     []*Effect     `protobuf:"bytes,7,rep,name=effects,proto3" json:"effects,omitempty"`
	Items       []*Item       `protobuf:"bytes,8,rep,name=items,proto3" json:"items,omitempty"`
	IsFree      bool          `protobuf:"varint,9,opt,name=is_free,json=isFree,proto3" json:"is_free,omitempty"`
	IsWall      bool          `protobuf:"varint,10,opt,name=is_wall,json=isWall,proto3" json:"is_wall,omitempty"`
	IsDoor      bool          `protobuf:"varint,11,opt,name=is_door,json=isDoor,proto3" json:"is_door,omitempty"`
	IsSpawn     *bool         `protobuf:"varint,12,opt,name=is_spawn,json=isSpawn,proto3,oneof" json:"is_spawn,omitempty"`
}

func (x *MapObjects) Reset() {
	*x = MapObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapObjects) ProtoMessage() {}

func (x *MapObjects) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapObjects.ProtoReflect.Descriptor instead.
func (*MapObjects) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{22}
}

func (x *MapObjects) GetPosition() *Coordinates {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *MapObjects) GetMonsters() []*Monster {
	if x != nil {
		return x.Monsters
	}
	return nil
}

func (x *MapObjects) GetPlayers() []*Character {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MapObjects) GetIsStairs() bool {
	if x != nil {
		return x.IsStairs
	}
	return false
}

func (x *MapObjects) GetPortals() []*Shortcut {
	if x != nil {
		return x.Portals
	}
	return nil
}

func (x *MapObjects) GetDecorations() []*Decoration {
	if x != nil {
		return x.Decorations
	}
	return nil
}

func (x *MapObjects) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *MapObjects) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MapObjects) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *MapObjects) GetIsWall() bool {
	if x != nil {
		return x.IsWall
	}
	return false
}

func (x *MapObjects) GetIsDoor() bool {
	if x != nil {
		return x.IsDoor
	}
	return false
}

func (x *MapObjects) GetIsSpawn() bool {
	if x != nil && x.IsSpawn != nil {
		return *x.IsSpawn
	}
	return false
}

type MapDecorations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Carpet   bool `protobuf:"varint,1,opt,name=carpet,proto3" json:"carpet,omitempty"`
	Rug      bool `protobuf:"varint,2,opt,name=rug,proto3" json:"rug,omitempty"`
	Rope     bool `protobuf:"varint,3,opt,name=rope,proto3" json:"rope,omitempty"`
	Lava     bool `protobuf:"varint,4,opt,name=lava,proto3" json:"lava,omitempty"`
	Pedestal bool `protobuf:"varint,5,opt,name=pedestal,proto3" json:"pedestal,omitempty"`
	Spawn    bool `protobuf:"varint,6,opt,name=spawn,proto3" json:"spawn,omitempty"`
}

func (x *MapDecorations) Reset() {
	*x = MapDecorations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapDecorations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapDecorations) ProtoMessage() {}

func (x *MapDecorations) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapDecorations.ProtoReflect.Descriptor instead.
func (*MapDecorations) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{23}
}

func (x *MapDecorations) GetCarpet() bool {
	if x != nil {
		return x.Carpet
	}
	return false
}

func (x *MapDecorations) GetRug() bool {
	if x != nil {
		return x.Rug
	}
	return false
}

func (x *MapDecorations) GetRope() bool {
	if x != nil {
		return x.Rope
	}
	return false
}

func (x *MapDecorations) GetLava() bool {
	if x != nil {
		return x.Lava
	}
	return false
}

func (x *MapDecorations) GetPedestal() bool {
	if x != nil {
		return x.Pedestal
	}
	return false
}

func (x *MapDecorations) GetSpawn() bool {
	if x != nil {
		return x.Spawn
	}
	return false
}

type Level struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   int32                 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Width   int32                 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height  int32                 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Free    []*structpb.ListValue `protobuf:"bytes,4,rep,name=free,proto3" json:"free,omitempty"`
	Objects []*MapObjects         `protobuf:"bytes,5,rep,name=objects,proto3" json:"objects,omitempty"`
	Ascii   []string              `protobuf:"bytes,6,rep,name=ascii,proto3" json:"ascii,omitempty"`
}

func (x *Level) Reset() {
	*x = Level{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Level) ProtoMessage() {}

func (x *Level) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Level.ProtoReflect.Descriptor instead.
func (*Level) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{24}
}

func (x *Level) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Level) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Level) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Level) GetFree() []*structpb.ListValue {
	if x != nil {
		return x.Free
	}
	return nil
}

func (x *Level) GetObjects() []*MapObjects {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *Level) GetAscii() []string {
	if x != nil {
		return x.Ascii
	}
	return nil
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Levels []*Level `protobuf:"bytes,1,rep,name=levels,proto3" json:"levels,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{25}
}

func (x *Map) GetLevels() []*Level {
	if x != nil {
		return x.Levels
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Type        *Event_Type  `protobuf:"varint,2,opt,name=type,proto3,enum=dungeonsandtrolls.Event_Type,oneof" json:"type,omitempty"`
	Coordinates *Coordinates `protobuf:"bytes,3,opt,name=coordinates,proto3,oneof" json:"coordinates,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{26}
}

func (x *Event) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Event) GetType() Event_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Event_DAMAGE
}

func (x *Event) GetCoordinates() *Coordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map             *Map         `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Items           []*Item      `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Character       *Character   `protobuf:"bytes,3,opt,name=character,proto3,oneof" json:"character,omitempty"`
	CurrentPosition *Coordinates `protobuf:"bytes,4,opt,name=current_position,json=currentPosition,proto3,oneof" json:"current_position,omitempty"`
	Tick            int64        `protobuf:"varint,5,opt,name=tick,proto3" json:"tick,omitempty"`
	Events          []*Event     `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{27}
}

func (x *GameState) GetMap() *Map {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *GameState) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GameState) GetCharacter() *Character {
	if x != nil {
		return x.Character
	}
	return nil
}

func (x *GameState) GetCurrentPosition() *Coordinates {
	if x != nil {
		return x.CurrentPosition
	}
	return nil
}

func (x *GameState) GetTick() int64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *GameState) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{28}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{29}
}

func (x *Identifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Identifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *Identifiers) Reset() {
	*x = Identifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifiers) ProtoMessage() {}

func (x *Identifiers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifiers.ProtoReflect.Descriptor instead.
func (*Identifiers) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{30}
}

func (x *Identifiers) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Coordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level     *int32 `protobuf:"varint,1,opt,name=level,proto3,oneof" json:"level,omitempty"`
	PositionX int32  `protobuf:"varint,2,opt,name=position_x,json=positionX,proto3" json:"position_x,omitempty"`
	PositionY int32  `protobuf:"varint,3,opt,name=position_y,json=positionY,proto3" json:"position_y,omitempty"`
}

func (x *Coordinates) Reset() {
	*x = Coordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinates) ProtoMessage() {}

func (x *Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinates.ProtoReflect.Descriptor instead.
func (*Coordinates) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{31}
}

func (x *Coordinates) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *Coordinates) GetPositionX() int32 {
	if x != nil {
		return x.PositionX
	}
	return 0
}

func (x *Coordinates) GetPositionY() int32 {
	if x != nil {
		return x.PositionY
	}
	return 0
}

type SkillUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId  string       `protobuf:"bytes,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	TargetId *string      `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3,oneof" json:"target_id,omitempty"`
	Location *Coordinates `protobuf:"bytes,3,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *SkillUse) Reset() {
	*x = SkillUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillUse) ProtoMessage() {}

func (x *SkillUse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillUse.ProtoReflect.Descriptor instead.
func (*SkillUse) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{32}
}

func (x *SkillUse) GetSkillId() string {
	if x != nil {
		return x.SkillId
	}
	return ""
}

func (x *SkillUse) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

func (x *SkillUse) GetLocation() *Coordinates {
	if x != nil {
		return x.Location
	}
	return nil
}

type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey *string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dungeonsandtrolls_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dungeonsandtrolls_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_proto_dungeonsandtrolls_proto_rawDescGZIP(), []int{33}
}

func (x *Registration) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

var File_proto_dungeonsandtrolls_proto protoreflect.FileDescriptor

var file_proto_dungeonsandtrolls_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73,
	0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x34, 0x0a, 0x0a,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x38, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64,
	0x6f, 0x6f, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x08, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x22, 0x8c, 0x01, 0x0a,
	0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x73, 0x63, 0x69, 0x69, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x73,
	0x63, 0x69, 0x69, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xb8, 0x03, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x35, 0x0a,
	0x03, 0x62, 0x75, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x62, 0x75,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e,
	0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x01, 0x52, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x48, 0x02, 0x52, 0x04,
	0x6d, 0x6f, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x48, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x04, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x04, 0x79, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x05, 0x52, 0x04, 0x79, 0x65, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x62, 0x75, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x1a, 0x5d, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x84, 0x01, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x69, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x8f, 0x03, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73,
	0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f, 0x66,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48,
	0x01, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xd0, 0x05, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x09, 0x64,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x77, 0x69, 0x6c, 0x6c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x09, 0x77, 0x69, 0x6c, 0x6c, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x72, 0x6d, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52,
	0x0e, 0x70, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x08, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x0e, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a,
	0x52, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0b, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x0d, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x69,
	0x6c, 0x6c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x69, 0x65,
	0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x22, 0x87, 0x09, 0x0a, 0x0f,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x09, 0x64, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x77, 0x69, 0x6c, 0x6c, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x03, 0x52, 0x09, 0x77, 0x69, 0x6c,
	0x6c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x04,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x72,
	0x6d, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x69, 0x65, 0x72, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x06,
	0x52, 0x0e, 0x70, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x07, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x08,
	0x52, 0x0c, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65,
	0x73, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x09, 0x52, 0x0e, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x0a, 0x52, 0x04, 0x6c,
	0x69, 0x66, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x0b, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x0d, 0x52, 0x06, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x69, 0x6c, 0x6c, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x6d,
	0x6f, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6f, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x22, 0x49, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x69,
	0x66, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x22, 0x4a, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x78,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x78, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x78, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xfb, 0x02, 0x0a,
	0x07, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61,
	0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x07, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x22, 0xab, 0x03, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e,
	0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x22, 0xa9, 0x05, 0x0a, 0x05, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61,
	0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0c, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x73, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x39, 0x0a, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x10, 0x03, 0x22, 0x82, 0x03, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x22, 0x53, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x6f, 0x66, 0x66, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x10, 0x05, 0x12,
	0x08, 0x0a, 0x04, 0x6e, 0x65, 0x63, 0x6b, 0x10, 0x06, 0x22, 0xd3, 0x02, 0x0a, 0x08, 0x44, 0x72,
	0x6f, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73,
	0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e,
	0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x08, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x9e, 0x01, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x42, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e,
	0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x44,
	0x72, 0x6f, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x22, 0x5a, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x22, 0x57, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x74, 0x6f, 0x22, 0xa9, 0x04, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x69, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x69, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x07, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x72,
	0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x44, 0x6f, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x53, 0x70, 0x61, 0x77,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x70, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x72, 0x70, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x75, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x6f,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x76, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6c, 0x61, 0x76, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x63, 0x69, 0x69, 0x22, 0x37, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0xf9,
	0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x48,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x09, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73,
	0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d,
	0x61, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61,
	0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x48, 0x01, 0x52, 0x0f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x1c, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a,
	0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x70,
	0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0xa3, 0x01, 0x0a, 0x08, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x48, 0x01, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x2a, 0x53, 0x0a, 0x0a, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x69, 0x72, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x10, 0x05, 0x32, 0x93, 0x06, 0x0a, 0x11, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x04, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e,
	0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1c, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e,
	0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x12, 0x1e, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1e, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x04, 0x59, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x2e, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x48, 0x5a, 0x46, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x64, 0x67, 0x2d, 0x67, 0x61,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x2d, 0x61, 0x6e,
	0x64, 0x2d, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x61, 0x6e, 0x64, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dungeonsandtrolls_proto_rawDescOnce sync.Once
	file_proto_dungeonsandtrolls_proto_rawDescData = file_proto_dungeonsandtrolls_proto_rawDesc
)

func file_proto_dungeonsandtrolls_proto_rawDescGZIP() []byte {
	file_proto_dungeonsandtrolls_proto_rawDescOnce.Do(func() {
		file_proto_dungeonsandtrolls_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dungeonsandtrolls_proto_rawDescData)
	})
	return file_proto_dungeonsandtrolls_proto_rawDescData
}

var file_proto_dungeonsandtrolls_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_dungeonsandtrolls_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_proto_dungeonsandtrolls_proto_goTypes = []interface{}{
	(DamageType)(0),             // 0: dungeonsandtrolls.DamageType
	(Skill_Target)(0),           // 1: dungeonsandtrolls.Skill.Target
	(Item_Type)(0),              // 2: dungeonsandtrolls.Item.Type
	(Event_Type)(0),             // 3: dungeonsandtrolls.Event.Type
	(*Message)(nil),             // 4: dungeonsandtrolls.Message
	(*Decoration)(nil),          // 5: dungeonsandtrolls.Decoration
	(*Position)(nil),            // 6: dungeonsandtrolls.Position
	(*Key)(nil),                 // 7: dungeonsandtrolls.Key
	(*Waypoint)(nil),            // 8: dungeonsandtrolls.Waypoint
	(*GameStateParams)(nil),     // 9: dungeonsandtrolls.GameStateParams
	(*CommandsBatch)(nil),       // 10: dungeonsandtrolls.CommandsBatch
	(*CommandsForMonsters)(nil), // 11: dungeonsandtrolls.CommandsForMonsters
	(*Elements)(nil),            // 12: dungeonsandtrolls.Elements
	(*Effect)(nil),              // 13: dungeonsandtrolls.Effect
	(*Attributes)(nil),          // 14: dungeonsandtrolls.Attributes
	(*SkillAttributes)(nil),     // 15: dungeonsandtrolls.SkillAttributes
	(*Stats)(nil),               // 16: dungeonsandtrolls.Stats
	(*Rewards)(nil),             // 17: dungeonsandtrolls.Rewards
	(*Monster)(nil),             // 18: dungeonsandtrolls.Monster
	(*Character)(nil),           // 19: dungeonsandtrolls.Character
	(*Skill)(nil),               // 20: dungeonsandtrolls.Skill
	(*Item)(nil),                // 21: dungeonsandtrolls.Item
	(*Dropable)(nil),            // 22: dungeonsandtrolls.Dropable
	(*SkillEffect)(nil),         // 23: dungeonsandtrolls.SkillEffect
	(*Object)(nil),              // 24: dungeonsandtrolls.Object
	(*Shortcut)(nil),            // 25: dungeonsandtrolls.Shortcut
	(*MapObjects)(nil),          // 26: dungeonsandtrolls.MapObjects
	(*MapDecorations)(nil),      // 27: dungeonsandtrolls.MapDecorations
	(*Level)(nil),               // 28: dungeonsandtrolls.Level
	(*Map)(nil),                 // 29: dungeonsandtrolls.Map
	(*Event)(nil),               // 30: dungeonsandtrolls.Event
	(*GameState)(nil),           // 31: dungeonsandtrolls.GameState
	(*User)(nil),                // 32: dungeonsandtrolls.User
	(*Identifier)(nil),          // 33: dungeonsandtrolls.Identifier
	(*Identifiers)(nil),         // 34: dungeonsandtrolls.Identifiers
	(*Coordinates)(nil),         // 35: dungeonsandtrolls.Coordinates
	(*SkillUse)(nil),            // 36: dungeonsandtrolls.SkillUse
	(*Registration)(nil),        // 37: dungeonsandtrolls.Registration
	nil,                         // 38: dungeonsandtrolls.CommandsForMonsters.CommandsEntry
	(*structpb.ListValue)(nil),  // 39: google.protobuf.ListValue
	(*emptypb.Empty)(nil),       // 40: google.protobuf.Empty
}
var file_proto_dungeonsandtrolls_proto_depIdxs = []int32{
	6,  // 0: dungeonsandtrolls.Key.doors:type_name -> dungeonsandtrolls.Position
	34, // 1: dungeonsandtrolls.CommandsBatch.buy:type_name -> dungeonsandtrolls.Identifiers
	33, // 2: dungeonsandtrolls.CommandsBatch.equip:type_name -> dungeonsandtrolls.Identifier
	35, // 3: dungeonsandtrolls.CommandsBatch.move:type_name -> dungeonsandtrolls.Coordinates
	36, // 4: dungeonsandtrolls.CommandsBatch.skill:type_name -> dungeonsandtrolls.SkillUse
	14, // 5: dungeonsandtrolls.CommandsBatch.assign_attribute:type_name -> dungeonsandtrolls.Attributes
	4,  // 6: dungeonsandtrolls.CommandsBatch.yell:type_name -> dungeonsandtrolls.Message
	38, // 7: dungeonsandtrolls.CommandsForMonsters.commands:type_name -> dungeonsandtrolls.CommandsForMonsters.CommandsEntry
	12, // 8: dungeonsandtrolls.Effect.min_damage:type_name -> dungeonsandtrolls.Elements
	12, // 9: dungeonsandtrolls.Effect.max_damage:type_name -> dungeonsandtrolls.Elements
	14, // 10: dungeonsandtrolls.Effect.boosts:type_name -> dungeonsandtrolls.Attributes
	16, // 11: dungeonsandtrolls.Effect.min_stats:type_name -> dungeonsandtrolls.Stats
	16, // 12: dungeonsandtrolls.Effect.max_stats:type_name -> dungeonsandtrolls.Stats
	14, // 13: dungeonsandtrolls.SkillAttributes.strength:type_name -> dungeonsandtrolls.Attributes
	14, // 14: dungeonsandtrolls.SkillAttributes.dexterity:type_name -> dungeonsandtrolls.Attributes
	14, // 15: dungeonsandtrolls.SkillAttributes.inteligence:type_name -> dungeonsandtrolls.Attributes
	14, // 16: dungeonsandtrolls.SkillAttributes.willpower:type_name -> dungeonsandtrolls.Attributes
	14, // 17: dungeonsandtrolls.SkillAttributes.constitution:type_name -> dungeonsandtrolls.Attributes
	14, // 18: dungeonsandtrolls.SkillAttributes.slash_armor:type_name -> dungeonsandtrolls.Attributes
	14, // 19: dungeonsandtrolls.SkillAttributes.piercing_resist:type_name -> dungeonsandtrolls.Attributes
	14, // 20: dungeonsandtrolls.SkillAttributes.fire_resist:type_name -> dungeonsandtrolls.Attributes
	14, // 21: dungeonsandtrolls.SkillAttributes.poison_resist:type_name -> dungeonsandtrolls.Attributes
	14, // 22: dungeonsandtrolls.SkillAttributes.electric_resist:type_name -> dungeonsandtrolls.Attributes
	14, // 23: dungeonsandtrolls.SkillAttributes.life:type_name -> dungeonsandtrolls.Attributes
	14, // 24: dungeonsandtrolls.SkillAttributes.stamina:type_name -> dungeonsandtrolls.Attributes
	14, // 25: dungeonsandtrolls.SkillAttributes.mana:type_name -> dungeonsandtrolls.Attributes
	14, // 26: dungeonsandtrolls.SkillAttributes.scalar:type_name -> dungeonsandtrolls.Attributes
	14, // 27: dungeonsandtrolls.Monster.attributes:type_name -> dungeonsandtrolls.Attributes
	13, // 28: dungeonsandtrolls.Monster.effects:type_name -> dungeonsandtrolls.Effect
	21, // 29: dungeonsandtrolls.Monster.equipped_items:type_name -> dungeonsandtrolls.Item
	22, // 30: dungeonsandtrolls.Monster.on_death:type_name -> dungeonsandtrolls.Dropable
	16, // 31: dungeonsandtrolls.Character.stats:type_name -> dungeonsandtrolls.Stats
	14, // 32: dungeonsandtrolls.Character.attributes:type_name -> dungeonsandtrolls.Attributes
	12, // 33: dungeonsandtrolls.Character.resistances:type_name -> dungeonsandtrolls.Elements
	21, // 34: dungeonsandtrolls.Character.inventory:type_name -> dungeonsandtrolls.Item
	21, // 35: dungeonsandtrolls.Character.equip:type_name -> dungeonsandtrolls.Item
	1,  // 36: dungeonsandtrolls.Skill.targetType:type_name -> dungeonsandtrolls.Skill.Target
	13, // 37: dungeonsandtrolls.Skill.effects:type_name -> dungeonsandtrolls.Effect
	14, // 38: dungeonsandtrolls.Skill.cost:type_name -> dungeonsandtrolls.Attributes
	14, // 39: dungeonsandtrolls.Skill.range:type_name -> dungeonsandtrolls.Attributes
	14, // 40: dungeonsandtrolls.Skill.radius:type_name -> dungeonsandtrolls.Attributes
	14, // 41: dungeonsandtrolls.Skill.duration:type_name -> dungeonsandtrolls.Attributes
	14, // 42: dungeonsandtrolls.Skill.damageAmount:type_name -> dungeonsandtrolls.Attributes
	0,  // 43: dungeonsandtrolls.Skill.damage_type:type_name -> dungeonsandtrolls.DamageType
	23, // 44: dungeonsandtrolls.Skill.caster:type_name -> dungeonsandtrolls.SkillEffect
	23, // 45: dungeonsandtrolls.Skill.target:type_name -> dungeonsandtrolls.SkillEffect
	2,  // 46: dungeonsandtrolls.Item.slot:type_name -> dungeonsandtrolls.Item.Type
	14, // 47: dungeonsandtrolls.Item.requirements:type_name -> dungeonsandtrolls.Attributes
	14, // 48: dungeonsandtrolls.Item.attributes:type_name -> dungeonsandtrolls.Attributes
	20, // 49: dungeonsandtrolls.Item.skills:type_name -> dungeonsandtrolls.Skill
	20, // 50: dungeonsandtrolls.Dropable.skill:type_name -> dungeonsandtrolls.Skill
	21, // 51: dungeonsandtrolls.Dropable.item:type_name -> dungeonsandtrolls.Item
	18, // 52: dungeonsandtrolls.Dropable.monster:type_name -> dungeonsandtrolls.Monster
	5,  // 53: dungeonsandtrolls.Dropable.decoration:type_name -> dungeonsandtrolls.Decoration
	8,  // 54: dungeonsandtrolls.Dropable.waypoint:type_name -> dungeonsandtrolls.Waypoint
	7,  // 55: dungeonsandtrolls.Dropable.key:type_name -> dungeonsandtrolls.Key
	15, // 56: dungeonsandtrolls.SkillEffect.attributes:type_name -> dungeonsandtrolls.SkillAttributes
	22, // 57: dungeonsandtrolls.SkillEffect.summons:type_name -> dungeonsandtrolls.Dropable
	35, // 58: dungeonsandtrolls.Shortcut.leads_to:type_name -> dungeonsandtrolls.Coordinates
	35, // 59: dungeonsandtrolls.MapObjects.position:type_name -> dungeonsandtrolls.Coordinates
	18, // 60: dungeonsandtrolls.MapObjects.monsters:type_name -> dungeonsandtrolls.Monster
	19, // 61: dungeonsandtrolls.MapObjects.players:type_name -> dungeonsandtrolls.Character
	25, // 62: dungeonsandtrolls.MapObjects.portals:type_name -> dungeonsandtrolls.Shortcut
	5,  // 63: dungeonsandtrolls.MapObjects.decorations:type_name -> dungeonsandtrolls.Decoration
	13, // 64: dungeonsandtrolls.MapObjects.effects:type_name -> dungeonsandtrolls.Effect
	21, // 65: dungeonsandtrolls.MapObjects.items:type_name -> dungeonsandtrolls.Item
	39, // 66: dungeonsandtrolls.Level.free:type_name -> google.protobuf.ListValue
	26, // 67: dungeonsandtrolls.Level.objects:type_name -> dungeonsandtrolls.MapObjects
	28, // 68: dungeonsandtrolls.Map.levels:type_name -> dungeonsandtrolls.Level
	3,  // 69: dungeonsandtrolls.Event.type:type_name -> dungeonsandtrolls.Event.Type
	35, // 70: dungeonsandtrolls.Event.coordinates:type_name -> dungeonsandtrolls.Coordinates
	29, // 71: dungeonsandtrolls.GameState.map:type_name -> dungeonsandtrolls.Map
	21, // 72: dungeonsandtrolls.GameState.items:type_name -> dungeonsandtrolls.Item
	19, // 73: dungeonsandtrolls.GameState.character:type_name -> dungeonsandtrolls.Character
	35, // 74: dungeonsandtrolls.GameState.current_position:type_name -> dungeonsandtrolls.Coordinates
	30, // 75: dungeonsandtrolls.GameState.events:type_name -> dungeonsandtrolls.Event
	35, // 76: dungeonsandtrolls.SkillUse.location:type_name -> dungeonsandtrolls.Coordinates
	10, // 77: dungeonsandtrolls.CommandsForMonsters.CommandsEntry.value:type_name -> dungeonsandtrolls.CommandsBatch
	9,  // 78: dungeonsandtrolls.DungeonsAndTrolls.Game:input_type -> dungeonsandtrolls.GameStateParams
	32, // 79: dungeonsandtrolls.DungeonsAndTrolls.Register:input_type -> dungeonsandtrolls.User
	34, // 80: dungeonsandtrolls.DungeonsAndTrolls.Buy:input_type -> dungeonsandtrolls.Identifiers
	33, // 81: dungeonsandtrolls.DungeonsAndTrolls.Equip:input_type -> dungeonsandtrolls.Identifier
	14, // 82: dungeonsandtrolls.DungeonsAndTrolls.AssignSkillPoints:input_type -> dungeonsandtrolls.Attributes
	35, // 83: dungeonsandtrolls.DungeonsAndTrolls.Move:input_type -> dungeonsandtrolls.Coordinates
	40, // 84: dungeonsandtrolls.DungeonsAndTrolls.Respawn:input_type -> google.protobuf.Empty
	36, // 85: dungeonsandtrolls.DungeonsAndTrolls.Skill:input_type -> dungeonsandtrolls.SkillUse
	4,  // 86: dungeonsandtrolls.DungeonsAndTrolls.Yell:input_type -> dungeonsandtrolls.Message
	10, // 87: dungeonsandtrolls.DungeonsAndTrolls.Commands:input_type -> dungeonsandtrolls.CommandsBatch
	11, // 88: dungeonsandtrolls.DungeonsAndTrolls.MonstersCommands:input_type -> dungeonsandtrolls.CommandsForMonsters
	31, // 89: dungeonsandtrolls.DungeonsAndTrolls.Game:output_type -> dungeonsandtrolls.GameState
	37, // 90: dungeonsandtrolls.DungeonsAndTrolls.Register:output_type -> dungeonsandtrolls.Registration
	40, // 91: dungeonsandtrolls.DungeonsAndTrolls.Buy:output_type -> google.protobuf.Empty
	40, // 92: dungeonsandtrolls.DungeonsAndTrolls.Equip:output_type -> google.protobuf.Empty
	40, // 93: dungeonsandtrolls.DungeonsAndTrolls.AssignSkillPoints:output_type -> google.protobuf.Empty
	40, // 94: dungeonsandtrolls.DungeonsAndTrolls.Move:output_type -> google.protobuf.Empty
	40, // 95: dungeonsandtrolls.DungeonsAndTrolls.Respawn:output_type -> google.protobuf.Empty
	40, // 96: dungeonsandtrolls.DungeonsAndTrolls.Skill:output_type -> google.protobuf.Empty
	40, // 97: dungeonsandtrolls.DungeonsAndTrolls.Yell:output_type -> google.protobuf.Empty
	40, // 98: dungeonsandtrolls.DungeonsAndTrolls.Commands:output_type -> google.protobuf.Empty
	40, // 99: dungeonsandtrolls.DungeonsAndTrolls.MonstersCommands:output_type -> google.protobuf.Empty
	89, // [89:100] is the sub-list for method output_type
	78, // [78:89] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_proto_dungeonsandtrolls_proto_init() }
func file_proto_dungeonsandtrolls_proto_init() {
	if File_proto_dungeonsandtrolls_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_dungeonsandtrolls_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decoration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandsBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandsForMonsters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Elements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dropable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shortcut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapDecorations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Level); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dungeonsandtrolls_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_dungeonsandtrolls_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Dropable_Skill)(nil),
		(*Dropable_Item)(nil),
		(*Dropable_Monster)(nil),
		(*Dropable_Decoration)(nil),
		(*Dropable_Waypoint)(nil),
		(*Dropable_Key)(nil),
	}
	file_proto_dungeonsandtrolls_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_proto_dungeonsandtrolls_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dungeonsandtrolls_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dungeonsandtrolls_proto_goTypes,
		DependencyIndexes: file_proto_dungeonsandtrolls_proto_depIdxs,
		EnumInfos:         file_proto_dungeonsandtrolls_proto_enumTypes,
		MessageInfos:      file_proto_dungeonsandtrolls_proto_msgTypes,
	}.Build()
	File_proto_dungeonsandtrolls_proto = out.File
	file_proto_dungeonsandtrolls_proto_rawDesc = nil
	file_proto_dungeonsandtrolls_proto_goTypes = nil
	file_proto_dungeonsandtrolls_proto_depIdxs = nil
}
