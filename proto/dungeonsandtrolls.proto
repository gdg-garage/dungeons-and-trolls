syntax = "proto3";

option go_package = "github.com/gdg-garage/dungeons-and-trolls/server/dungeonsandtrolls/api";

package dungeonsandtrolls;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// The game service definition.
service DungeonsAndTrolls {
  // Sends all info about the game.
  rpc Game(GameStateParams) returns (GameState) {}
  // Register provided User to the Game and create a character.
  rpc Register(User) returns (Registration) {}
  // Buy Items identified by the provided ID for the Character bound to the
  // logged user.
  rpc Buy(Identifiers) returns (google.protobuf.Empty) {}
  // Equip the Item from the ground identified by the provided ID for the Character bound to the
  // logged user (unused).
  rpc PickUp(Identifier) returns (google.protobuf.Empty) {}
  // Assign skill point to the attribute for the Character bound to the logged
  // user.
  rpc Move(Coordinates) returns (google.protobuf.Empty) {}
  // Respawn the Character bound to the logged user.
  rpc Respawn(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Use a skill (provided by an item) by the Character bound to the logged
  // user.
  rpc Skill(SkillUse) returns (google.protobuf.Empty) {}
  // The Character bound to the logged user yells a messages (visible for
  // everyone).
  rpc Yell(Message) returns (google.protobuf.Empty) {}
  // Send multiple commands to the Character bound to the logged user. The order
  // of execution is defined in the message.
  rpc Commands(CommandsBatch) returns (google.protobuf.Empty) {}
  // Control monsters. Admin only.
  rpc MonstersCommands(CommandsForMonsters) returns (google.protobuf.Empty) {}

  // TODO teleport home
  // maybe it is enough that you can always move to the 0 floor

  // TODO: How to use stairs.
  //  * this is probably just a condition for move.
  // TODO: Stats? Those will be probably in Grafana (not sure if we need an rpc
  // for that).
}

message Message { string text = 1; }

message Decoration {
  string name = 1;
  string type = 2;
}

message Position {
  int32 x = 1;
  int32 y = 2;
}

message Key {
  repeated Position doors = 1;
}

message Waypoint {
  int32 destinationFloor = 1;
}

message GameStateParams {
  // default false
  optional bool ascii = 1;
  // default false
  optional bool events = 2;
  // default true
  optional bool blocking = 3;
}

message CommandsBatch {
  optional Identifiers buy = 1;
  optional Identifier pickUp = 2;
  optional Coordinates move = 3;
  optional SkillUse skill = 4;
  optional Message yell = 6;
}

message CommandsForMonsters {
  // Monster ID with corresponding batch of commands.
  map<string, CommandsBatch> commands = 1;
}

message Elements {
  int32 cold = 1;
  int32 fire = 2;
  int32 lightning = 3;
  int32 poison = 4;
  int32 physical = 5;
}

enum DamageType {
  none = 0;
  slash = 1;
  piercing = 2; // todo no ing
  fire = 3;
  poison = 4;
  electric = 5;
}

message Effect {
  Elements min_damage = 1;
  Elements max_damage = 2;
  int32 duration = 3;
  optional int32 area_of_effect = 4;
  optional Attributes boosts = 5;
  Stats min_stats = 6;
  Stats max_stats = 7;
}

message Attributes {
  optional float strength = 1;
  optional float dexterity = 2;
  optional float intelligence = 3;
  optional float willpower = 4;
  optional float constitution = 5;

  optional float slash_armor = 6;     // TODO slash_resist
  optional float piercing_resist = 7; // TODO pierce_resist
  optional float fire_resist = 8;
  optional float poison_resist = 9;
  optional float electric_resist = 10;

  optional float life = 11;
  optional float stamina = 12;
  optional float mana = 13;

  optional float scalar = 14;
}

message SkillAttributes {
  optional Attributes strength = 1;
  optional Attributes dexterity = 2;
  optional Attributes inteligence = 3;
  optional Attributes willpower = 4;
  optional Attributes constitution = 5;

  optional Attributes slash_armor = 6;     // TODO slash_resist
  optional Attributes piercing_resist = 7; // TODO pierce_resist
  optional Attributes fire_resist = 8;
  optional Attributes poison_resist = 9;
  optional Attributes electric_resist = 10;
 
  optional Attributes life = 11;
  optional Attributes stamina = 12;
  optional Attributes mana = 13;
 
  optional Attributes scalar = 14;
}

message Stats {
  float life = 1;
  float mana = 2;
  float stamina = 3;
}

message Rewards {
  optional int32 xp = 1;
  optional int32 money = 2;
}

message Monster {
  string id = 1;
  string name = 2;
  // Stats stats = 3;
  // int32 level = 4;
  Attributes attributes = 5;
  // repeated Item inventory = 7;
  repeated Effect effects = 8;
  // int32 xp = 9;
  repeated Item equipped_items = 11;
  int64 score = 12;
  string icon = 13;
  string algorithm = 14;
  string faction = 15;
  repeated Droppable on_death = 16;
}

// TODO create user monster

message Character {
  string id = 1;
  string name = 2;
  Attributes attributes = 3;
  int64 money = 4;
  repeated Item equip = 5;
  int64 score = 6;
}

message Skill {
  enum Target {
    none = 0;
    position = 1;
    character = 2;
    item = 3;
  }

  string id = 1;
  string name = 2;
  Target targetType = 3; // TODO target
  repeated Effect effects = 4;
  Attributes cost = 5;
  Attributes range = 6;
  Attributes radius = 7;
  Attributes duration = 8;
  Attributes damageAmount = 9;
  DamageType damage_type = 10;
  SkillEffect caster = 11; // TODO casterEffects
  SkillEffect target = 12; // TODO targetEffects
}

message Item {
  enum Type {
    none = 0;
    head = 1;
    mainHand = 2;
    offHand = 3;
    body = 4;
    legs = 5;
    neck = 6;
  }

  string id = 1;
  string name = 2;
  Type slot = 3;
  int32 buy_price = 4; // TODO price
  Attributes requirements = 5;
  Attributes attributes = 6; // TODO rename to effects
  repeated Skill skills = 7;
}

message Droppable {
  oneof data {
    Skill skill = 1;
    Item item = 2;
    Monster monster = 3;
    Decoration decoration = 4;
    Waypoint waypoint = 5;
    Key key = 6;
  }
}

message SkillEffect {
	SkillAttributes attributes = 1;
	repeated string flags = 2;
	repeated Droppable summons = 3;
};

// TODO this is temporary
message Object {
  string name = 1;
  int32 position_x = 2;
  int32 position_y = 3;
}

message Shortcut { optional Coordinates leads_to = 1; }

message MapObjects {
  Coordinates position = 1;
  repeated Monster monsters = 2;
  repeated Character players = 3;
  bool is_stairs = 4;
  repeated Shortcut portals = 5;
  repeated Decoration decorations = 6;
  repeated Effect effects = 7;
  repeated Item items = 8;
  bool is_free = 9;
  bool is_wall = 10;
  bool is_door = 11;
  optional bool is_spawn = 12;
  // TODO: chests are not implemented yet
  // bool chest = 4;
}

// Those are useful for visualization and niche implementations (you do not need
// them for your first bot).
message MapDecorations {
  bool carpet = 1;
  bool rug = 2;
  bool rope = 3;
  bool lava = 4;
  bool pedestal = 5;
  bool spawn = 6;
}

message Level {
  int32 level = 1;
  int32 width = 2;
  int32 height = 3;
  repeated google.protobuf.ListValue free = 4;
  repeated MapObjects objects = 5;
  repeated string ascii = 6;
}

message Map { repeated Level levels = 1; }

message Event {
  enum Type {
    DAMAGE = 0;
    MESSAGE = 1;
    BUY = 2;
    EQUIP = 3;
    ERROR = 4;
  }

  string message = 1;
  optional Type type = 2;
  optional Coordinates coordinates = 3;
}

message GameState {
  Map map = 1;
  repeated Item items = 2; // TODO rename to shop
  optional Character character = 3;
  optional Coordinates current_position = 4;
  int64 tick = 5;
  // List of events which occurred in the previous tick. Useful for visualising
  // effects, debugging and communication.
  repeated Event events = 6;
  int64 score = 7;
}

message User { string username = 1; }

message Identifier { string id = 1; }

message Identifiers { repeated string ids = 1; }

message Coordinates {
  optional int32 level = 1;
  int32 position_x = 2;
  int32 position_y = 3;
}

message SkillUse {
  string skill_id = 1;
  optional string target_id = 2;
  optional Coordinates location = 3;
}

message Registration { optional string api_key = 1; }