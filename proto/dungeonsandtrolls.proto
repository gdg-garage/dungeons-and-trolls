syntax = "proto3";

option go_package = "github.com/gdg-garage/dungeons-and-trolls/server/dungeonsandtrolls";

package dungeonsandtrolls;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";


// The game service definition.
service DungeonsAndTrolls {
  // Sends all info about the game.
  rpc Game(GameStateParams) returns (GameState) {}
  // Register provided User to the Game and create a character.
  rpc Register(User) returns (google.protobuf.Empty) {}
  // Buy Items identified by the provided ID for the Character bound to the logged user.
  rpc Buy(Identifiers) returns (google.protobuf.Empty) {}
  // Equip the Item identified by the provided ID for the Character bound to the logged user (unused).
  rpc Equip(Identifier) returns (google.protobuf.Empty) {}
  // Assign skill point to the attribute for the Character bound to the logged user.
  rpc AssignSkillPoints(Attributes) returns (google.protobuf.Empty) {}
  // Move the Character bound to the logged user to the specified place.
  rpc Move(Coordinates) returns (google.protobuf.Empty) {}
  // Respawn the Character bound to the logged user.
  rpc Respawn(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Use a skill (provided by an item) by the Character bound to the logged user.
  rpc Skill(SkillUse) returns (google.protobuf.Empty) {}
  // The Character bound to the logged user yells a messages (visible for everyone).
  rpc Yell(Message) returns (google.protobuf.Empty) {}
  // Send multiple commands to the Character bound to the logged user. The order of execution is defined in the message.
  rpc Commands(CommandsBatch) returns (google.protobuf.Empty) {}
  // Control monsters. Admin only.
  rpc MonstersCommands(CommandsForMonsters) returns (google.protobuf.Empty) {}

  // TODO teleport home
  // maybe it is enough that you can always move to the 0 floor

  // TODO: How to use stairs.
  //  * this is probably just a condition for move.
  // TODO: Stats? Those will be probably in Grafana (not sure if we need an rpc for that).
}

message Message {
  string text = 1;
}

message GameStateParams {
  // default false
  optional bool ascii = 1;
  // default false
  optional bool events = 2;
  // default true
  optional bool blocking = 3;
}

message CommandsBatch {
  repeated Identifier buy = 1;
  repeated Identifier equip = 2;
  optional Coordinates move = 3;
  optional SkillUse skill = 4;
  repeated Attributes assign_attribute = 5;
  optional Message yell = 6;
}

message CommandsForMonsters {
  // Monster ID with corresponding batch of commands.
  map<string, CommandsBatch> commands = 1;
}

message Elements {
  int32 cold = 1;
  int32 fire = 2;
  int32 lightning = 3;
  int32 poison = 4;
  int32 physical = 5;
}

message Effect {
  Elements min_damage = 1;
  Elements max_damage = 2;
  int32 duration = 3;
  optional int32 area_of_effect = 4;
  optional Attributes boosts = 5;
  Stats min_stats = 6;
  Stats max_stats = 7;
}

message Attributes {
  int32 strength = 1;
  int32 intelligence = 2;
  int32 endurance = 3;
  int32 willpower = 4;
  int32 dexterity = 5;
}

message Stats {
  float health = 1;
  float mana = 2;
  float stamina = 3;
}

message Monster {
  string id = 1;
  string name = 2;
  Stats stats = 3;
  int32 level = 4;
  Attributes attributes = 5;
  repeated Elements resistances = 6;
  repeated Item inventory = 7;
  repeated Effect effects = 8;
}

message Character {
  string id = 1;
  string name = 2;
  Stats stats = 3;
  int32 level = 4;
  Attributes attributes = 5;
  repeated Elements resistances = 6;
  repeated Item inventory = 7;
  int32 xp = 8;
  int32 money = 9;
  int32 free_skill_points = 10;
}

message Skill {
  string id = 1;
  string name = 2;
  repeated Effect effects = 3;
  repeated Attributes requirements = 4;
  Stats cost = 5;
  bool requires_line_of_sight = 6;
  int32 max_distance = 7;
  int32 max_move_distance = 8;
}

enum ItemVisualType {
  DAGGER = 0;
  SWORD = 1;
  WAND = 2;
  AXE = 3;
  MACE = 4;
  CLAW = 5;
  STAFF = 6;
  SPEAR = 7;
  SHIELD = 8;
  HELMET = 9;
  BODY_ARMOR= 10;
  TROUSERS = 11;
  BELT = 12;
  BOOTS = 13;
  GLOVES = 14;
  RING = 15;
}

message Item {
  enum Type {
    SHIELD = 0;
    HELMET = 1;
    BODY_ARMOR = 2;
    TROUSERS = 3;
    BELT = 4;
    BOOTS = 5;
    GLOVES = 6;
    RING = 7;
    WEAPON = 8;
  }

  string id = 1;
  string name = 2;
  Type type = 3;
  float price = 4;
  optional float weight = 5;
  Attributes requirements = 6;
  Attributes boosts = 7;
  repeated Elements resistances = 8;
  optional ItemVisualType visual_type = 9;
  repeated Skill skills = 10;
}

message Jump {
  float max_jump_distance = 1;
  float mana_cost = 2;
}

// TODO this is temporary
message Object {
  string name = 1;
  int32 position_x = 2;
  int32 position_y = 3;
}

message Shortcut {
  optional Coordinates leads_to = 1;
}

message MapObjects {
  Coordinates position = 1;
  repeated Monster monsters = 2;
  repeated Character players = 3;
  repeated Shortcut stairs = 4;
  repeated Shortcut portals = 5;
  MapDecorations decorations = 6;
  repeated Effect effects = 7;
  // TODO: chests are not implemented yet
  // bool chest = 4;
}

message MapDecorations {
  bool carpet = 1;
  bool rug = 2;
  bool door = 3;
  bool anomaly = 4;
}

message Level {
  int32 level = 1;
  repeated google.protobuf.ListValue free = 2;
  MapObjects objects = 3;
  repeated string ascii = 4;
}

message Map {
  repeated Level levels = 1;
}

message Event {
  enum Type {
    DAMAGE = 0;
    MESSAGE = 1;
  }

  string message = 1;
  optional Type type = 2;
  optional Coordinates coordinates = 3;
}

message GameState {
  Map map = 1;
  repeated Item items = 2;
  optional Character character = 3;
  optional Coordinates current_position = 4;
  int64 tick = 5;
  // List of events which occurred in the previous tick. Useful for visualising effects and debugging.
  repeated Event events = 6;
}

message User {
  string username = 1;
}

message Identifier {
  string id = 1;
}

message Identifiers {
  repeated string ids = 1;
}

message Coordinates {
  optional int32 level = 1;
  int32 position_x = 2;
  int32 position_y = 3;
}

message SkillUse {
  string skill_id = 1;
  optional string target_id = 2;
  optional Coordinates location = 3;
}