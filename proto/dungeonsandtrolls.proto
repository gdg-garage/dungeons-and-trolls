syntax = "proto3";

option go_package = "github.com/gdg-garage/dungeons-and-trolls/server/dungeonsandtrolls/api";

package dungeonsandtrolls;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// The game service definition.
service DungeonsAndTrolls {
  // Sends all info about the game.
  rpc Game(GameStateParams) returns (GameState) {}
  // Sends all info about the game level.
  rpc GameLevel(GameStateParamsLevel) returns (GameState) {}
  // Sends all info about all players.
  rpc Players(PlayersParams) returns (PlayersInfo) {}
  // Sends info about
  rpc Levels(PlayersParams) returns (AvailableLevels) {}
  // Register provided User to the Game and create a character.
  rpc Register(User) returns (Registration) {}
  // Buy Items identified by the provided ID for the Character bound to the
  // logged user.
  rpc Buy(IdentifiersWithParams) returns (google.protobuf.Empty) {}
  // Equip the Item from the ground identified by the provided ID for the Character bound to the
  // logged user (unused).
  rpc PickUp(IdentifierWithParams) returns (google.protobuf.Empty) {}
  // Assign skill point to the attribute for the Character bound to the logged
  // user.
  rpc Move(PositionWithParams) returns (google.protobuf.Empty) {}
  // Respawn the Character bound to the logged user.
  rpc Respawn(RespawnWithParams) returns (google.protobuf.Empty) {}
  // Use a skill (provided by an item) by the Character bound to the logged
  // user.
  rpc Skill(SkillUseWithParams) returns (google.protobuf.Empty) {}
  // The Character bound to the logged user yells a messages (visible for
  // everyone).
  rpc Yell(MessageWithParams) returns (google.protobuf.Empty) {}
  // Send multiple commands to the Character bound to the logged user. The order
  // of execution is defined in the message.
  rpc Commands(CommandsBatchWithParams) returns (google.protobuf.Empty) {}
  // Control monsters. Admin only.
  rpc MonstersCommands(CommandsForMonstersWithParams) returns (google.protobuf.Empty) {}
  // Send multiple commands to the Character bound to the logged user. The order
  // of execution is defined in the message.
  rpc AssignSkillPoints(AttributesWithParams) returns (google.protobuf.Empty) {}

  // TODO: Stats? Those will be probably in Grafana (not sure if we need an rpc
  // for that).
}

message IdentifierWithParams {
  Identifier identifier = 1;
  // default true
  optional bool blocking =2;
}

message IdentifiersWithParams {
  Identifiers identifiers = 1;
  // default true
  optional bool blocking =2;
}

message PositionWithParams {
  Position position = 1;
  // default true
  optional bool blocking =2;
}

message RespawnWithParams {
  google.protobuf.Empty respawn = 1;
  // default true
  optional bool blocking =2;
}

message SkillUseWithParams {
  SkillUse skill_use = 1;
  // default true
  optional bool blocking =2;
}

message MessageWithParams {
  Message message = 1;
  // default true
  optional bool blocking =2;
}

message CommandsBatchWithParams {
  CommandsBatch commands_batch = 1;
  // default true
  optional bool blocking =2;
}

message CommandsForMonstersWithParams {
  CommandsForMonsters commands_for_monsters = 1;
  // default true
  optional bool blocking =2;
}

message AttributesWithParams {
  Attributes attributes = 1;
  // default true
  optional bool blocking =2;
}

message PlayersParams {
  // default false
  optional bool blocking =2;
}

message Message {
  string text = 1;
}

message Decoration {
  string name = 1;
  string type = 2;
  string icon = 3;
}

message Position {
  int32 positionX = 1;
  int32 positionY = 2;
}

message Key {
  repeated Position doors = 1;
}

message Waypoint {
  int32 destination_floor = 1;
}

message GameStateParams {
  // default false
  optional bool blocking = 1;
  // default true
  optional bool items = 2;
}

message AvailableLevels {
  repeated int32 levels = 1;
}

message GameStateParamsLevel {
  // default false
  optional bool blocking = 1;
  // default true
  optional bool items = 2;
  int32 level = 3;
}

message CommandsBatch {
  optional Identifiers buy = 1;
  optional Identifier pick_up = 2;
  optional Position move = 3;
  optional SkillUse skill = 4;
  optional Message yell = 6;
  optional Attributes assign_skill_points = 7;
}

message CommandsForMonsters {
  // Monster ID with corresponding batch of commands.
  map<string, CommandsBatch> commands = 1;
}

enum DamageType {
  none = 0;
  slash = 1;
  pierce = 2;
  fire = 3;
  poison = 4;
  electric = 5;
}

message Effect {
  float damage_amount = 1;
  DamageType damage_type = 2;
  Attributes effects = 3;
  int32 duration = 4;
  // Internal caster id field
  optional string _caster_id = 5;
}

message Attributes {
  optional float strength = 1;
  optional float dexterity = 2;
  optional float intelligence = 3;
  optional float willpower = 4;
  optional float constitution = 5;

  optional float slash_resist = 6;
  optional float pierce_resist = 7;
  optional float fire_resist = 8;
  optional float poison_resist = 9;
  optional float electric_resist = 10;

  optional float life = 11;
  optional float stamina = 12;
  optional float mana = 13;

  optional float constant = 14;
}

message SkillAttributes {
  optional Attributes strength = 1;
  optional Attributes dexterity = 2;
  optional Attributes intelligence = 3;
  optional Attributes willpower = 4;
  optional Attributes constitution = 5;

  optional Attributes slash_resist = 6;
  optional Attributes pierce_resist = 7;
  optional Attributes fire_resist = 8;
  optional Attributes poison_resist = 9;
  optional Attributes electric_resist = 10;
 
  optional Attributes life = 11;
  optional Attributes stamina = 12;
  optional Attributes mana = 13;
 
  optional Attributes constant = 14;
}

message Stats {
  float life = 1;
  float mana = 2;
  float stamina = 3;
}

message Stun {
  bool is_stunned = 1;
  bool is_immune = 2;
}

message Monster {
  string id = 1;
  string name = 2;
  string icon = 3;
  repeated SimpleItem items = 4;
  repeated Effect effects = 5;
  float life_percentage = 6;
  string faction = 7;

  optional Attributes attributes = 8;
  repeated Item equipped_items = 9;
  optional float score = 10;
  optional string algorithm = 11;
  repeated Droppable on_death = 12;
  optional Attributes max_attributes = 13;
  optional int32 last_damage_taken = 14;
  optional Stun stun = 15;
}

message Character {
  string id = 1;
  string name = 2;
  Attributes attributes = 3;
  int32 money = 4;
  repeated Item equip = 5;
  float score = 6;
  float skill_points = 7;
  repeated Effect effects = 9;
  Attributes max_attributes = 10;
  int32 last_damage_taken = 11;
  Coordinates coordinates = 12;
  Stun stun = 13;
}

message PlayersInfo {
  repeated Character players = 1;
}

message Skill {
  enum Target {
    none = 0;
    position = 1;
    character = 2;
  }

  string id = 1;
  string name = 2;
  Target target = 3;
  Attributes cost = 4;
  Attributes range = 5;
  Attributes radius = 6;
  Attributes duration = 7;
  Attributes damage_amount = 8;
  DamageType damage_type = 9;
  SkillEffect caster_effects = 10;
  SkillEffect target_effects = 11;
  SkillGenericFlags flags = 12;
}

message Item {
  enum Type {
    head = 0;
    mainHand = 1;
    offHand = 2;
    body = 3;
    legs = 4;
    neck = 5;
  }

  string id = 1;
  string name = 2;
  Type slot = 3;
  int32 price = 4;
  Attributes requirements = 5;
  Attributes attributes = 6;
  repeated Skill skills = 7;
  string icon = 8;
  optional bool unidentified = 9;
}

message SimpleItem {
  string name = 1;
  Item.Type slot = 2;
  string icon = 3;
}

message Droppable {
  oneof data {
    Skill skill = 1;
    Item item = 2;
    Monster monster = 3;
    Decoration decoration = 4;
    Waypoint waypoint = 5;
    Key key = 6;
  }
}

message SkillGenericFlags {
  bool requires_out_of_combat = 1; // requires that the caster has not taken any damage in last 2 ticks
  bool requires_line_of_sight = 2; // requires the target position be visible from the caster position
  bool passive = 3; // the effects of the skill are automatically applied every tick, assuming the cost can be paid; multiple passive skills are allowed
}

message SkillSpecificFlags {
  bool movement = 1; // moves the caster to the target position, or the target to the caster position
  bool knockback = 2; // moves the caster/target one tile away from the other
  bool stun = 3; // prevents the caster/target from performing any actions for one tick, and grants immunity to stun for the following tick
  bool ground_effect = 4; // creates ground effect at caster/target position, which applies the effects of the skill
}

message SkillEffect {
	SkillAttributes attributes = 1;
  SkillSpecificFlags flags = 2;
	repeated Droppable summons = 3;
};

message Shortcut { optional Coordinates leads_to = 1; }

message MapObjects {
  Position position = 1;
  repeated Monster monsters = 2;
  repeated Character players = 3;
  bool is_stairs = 4;
  optional Waypoint portal = 5;
  repeated Decoration decorations = 6;
  repeated Effect effects = 7;
  repeated Item items = 8;
  bool is_free = 9;
  bool is_wall = 10;
  bool is_door = 11;
  optional bool is_spawn = 12;
}

message Level {
  int32 level = 1;
  int32 width = 2;
  int32 height = 3;
  repeated google.protobuf.ListValue free = 4;
  repeated MapObjects objects = 5;
  repeated string ascii = 6;
}

message Map { repeated Level levels = 1; }

message Event {
  enum Type {
    DAMAGE = 0;
    MESSAGE = 1;
    BUY = 2;
    EQUIP = 3;
    ERROR = 4;
    SKILL = 5;
    DEATH = 6;
    SCORE = 7;
    MOVE = 8;
    AOE = 9;
  }

  string message = 1;
  optional Type type = 2;
  optional Coordinates coordinates = 3;
  optional float damage = 4;
  optional string player_id = 5;
  optional string skill_name = 6;
  optional float radius = 7;
  optional Coordinates target = 8;
  optional Skill skill = 9;
}

message GameState {
  Map map = 1;
  repeated Item shop_items = 2;
  optional Character character = 3;
  optional Position current_position = 4;
  optional int32 current_level = 5;
  int32 tick = 6;
  // List of events which occurred in the previous tick. Useful for visualising
  // effects, debugging and communication.
  repeated Event events = 7;
  float score = 8;
  int32 max_level = 9;
}

message User { string username = 1; }

message Identifier { string id = 1; }

message Identifiers { repeated string ids = 1; }

message Coordinates {
  int32 level = 1;
  int32 position_x = 2;
  int32 position_y = 3;
}

message SkillUse {
  string skill_id = 1;
  optional string target_id = 2;
  optional Position position = 3;
}

message Registration { optional string api_key = 1; }